version: '3.9'

services:
  postgres-order:
    image: postgres:14.17
    container_name: postgres-order-db
    environment:
      POSTGRES_DB: ${DB_DATABASE_ORDER}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:${DB_PORT}"
    volumes:
      - pgdata-order:/var/lib/postgresql/data
    networks:
      - backend

  postgres-inventory:
    image: postgres:14.17
    container_name: postgres-inventory-db
    environment:
      POSTGRES_DB: ${DB_DATABASE_INVENTORY}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:${DB_PORT}"
    volumes:
      - pgdata-inventory:/var/lib/postgresql/data
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    container_name: rabbitmq-microservices
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - backend

  order-service:
    build: ./order-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-order:${DB_PORT}/${DB_DATABASE_ORDER}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      RABBITMQ_SP_HOST: ${RABBITMQ_HOST}
      RABBITMQ_SP_PORT: ${RABBITMQ_PORT}
      RABBITMQ_SP_USER: ${RABBITMQ_USER}
      RABBITMQ_SP_PASSWORD: ${RABBITMQ_PASSWORD}
    ports:
      - "8080:${PORT_JAVA}"
    depends_on:
      - postgres-order
      - rabbitmq
    networks:
      - backend

  inventory-service:
    build: ./inventory-service
    env_file:
      - ./inventory-service/.env
    environment:
      DB_HOST: postgres-inventory
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_DATABASE_INVENTORY}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      URL_SOCKET: http://socket-service:${SOCKET_PORT}
    ports:
      - "3000:${PORT_NODE}"
    depends_on:
      - postgres-inventory
      - rabbitmq
      - socket-service
    networks:
      - backend
  socket-service:
    build: ./socket-server
    container_name: socket-service
    ports:
      - "3001:${SOCKET_PORT}"
    networks:
      - backend
  db-seeder:
    image: postgres:14.17
    depends_on:
      - postgres-order
      - postgres-inventory
      - order-service
      - inventory-service
    volumes:
      - ./init-scripts/fill_tables_order.sql:/docker-entrypoint-initdb.d/fill_tables_order.sql
      - ./init-scripts/fill_tables_inventory.sql:/docker-entrypoint-initdb.d/fill_tables_inventory.sql
      - ./init-scripts/wait-for-it.sh:/scripts/wait-for-it.sh
    environment:
      PGUSER: ${DB_USER}
      PGPASSWORD: ${DB_PASSWORD}
    entrypoint: >
      bash -c "
        chmod +x /scripts/wait-for-it.sh &&
        /scripts/wait-for-it.sh postgres-order:${DB_PORT} --timeout=60 &&
        /scripts/wait-for-it.sh postgres-inventory:${DB_PORT} --timeout=60 &&
        echo 'Bases de datos disponibles, esperando microservicios...' &&
        sleep 20 &&
        echo 'Ejecutando seed en restaurante...' &&
        psql -h postgres-order -U ${DB_USER} -d ${DB_DATABASE_ORDER} -f /docker-entrypoint-initdb.d/fill_tables_order.sql &&
        echo 'Seed en restaurante completado.' &&
        echo 'Ejecutando seed en inventario...' &&
        psql -h postgres-inventory -U ${DB_USER} -d ${DB_DATABASE_INVENTORY} -f /docker-entrypoint-initdb.d/fill_tables_inventory.sql &&
        echo 'Seed en inventario completado.'
      "
    networks:
      - backend
  liquibase-order:
    image: liquibase/liquibase
    container_name: liquibase-order
    depends_on:
      - postgres-order
    volumes:
      - ./liquibase/order:/liquibase/changelog
    command:
      [
        "--url=jdbc:postgresql://postgres-order:${DB_PORT}/${DB_DATABASE_ORDER}",
        "--changeLogFile=changelog-order.xml",
        "--username=${DB_USER}",
        "--password=${DB_PASSWORD}",
        "update"
      ]
    networks:
      - backend

  liquibase-inventory:
    image: liquibase/liquibase
    container_name: liquibase-inventory
    depends_on:
      - postgres-inventory
    volumes:
      - ./liquibase/inventory:/liquibase/changelog
    command:
      [
        "--url=jdbc:postgresql://postgres-inventory:${DB_PORT}/${DB_DATABASE_INVENTORY}",
        "--changeLogFile=changelog-inventory.xml",
        "--username=${DB_USER}",
        "--password=${DB_PASSWORD}",
        "update"
      ]
    networks:
      - backend

volumes:
  pgdata-order:
  pgdata-inventory:
  rabbitmq_data:

networks:
  backend: